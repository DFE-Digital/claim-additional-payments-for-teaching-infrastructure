
jobs:
  - job: job_publish_database
    displayName: Deploy database schema changes 

    pool:
      vmImage: windows-latest

    variables:
      - group: dqt-d01
      - name: service_connection_name
        value: azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef
      - name: datalayer_project_directory
        value: solution/dqt.datalayer 
      - name: nuget_config_path
        value: solution/nuget.config  

    steps:
      - task: FileTransform@1
        inputs:
          folderPath: "$(System.DefaultWorkingDirectory)/"
          fileType: "json"
          targetFiles: "**/local.settings.json"

      - task: DotNetCoreCLI@2
        displayName: "Initialize EntityframeworkCore"
        inputs:
          command: "custom"
          custom: tool
          arguments: "install --global dotnet-ef"

      - task: DotNetCoreCLI@2
        inputs:
          command: 'custom'
          custom: ef
          arguments: 'dotnet ef database update -c DQTDataContext -p dqt.datalayer -s dqt.datalayer -v --no-build --msbuildprojectextensionspath*'
          
      - task: DotNetCoreCLI@2
        displayName: dotnet restore
        inputs:
          command: restore
          projects: "${{variables.datalayer_project_directory}}/*.csproj"
          feedsToUse: "config"
          includeNuGetOrg: true
          nugetConfigPath: "${{variables.nuget_config_path}}"

      - task: DotNetCoreCLI@2
        displayName: "Create migration script"
        inputs:
          command: custom
          custom: ef
          arguments: "migrations script -i -o migration.sql"
          workingDirectory: ${{ variables.datalayer_project_directory }}

      - publish: ${{ variables.datalayer_project_directory }}
        displayName: Publish sql script
        artifact: "drop-sql"
      - task: AzurePowerShell@5
        displayName: 'Install the PostGres Module'
        inputs:
          azureSubscription: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'
          ScriptType: 'InlineScript'
          Inline: 'Install-Module -Name Az.PostgreSql -AllowClobber -force'
          azurePowerShellVersion: 'LatestVersion'
      - task: AzurePowerShell@5
        displayName: "Open PostgreSQL Firewall"
        inputs:
          azureSubscription: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'
          ScriptType: 'InlineScript'
          Inline: |
            # Setting Variables
            $MyIPAddress = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content.Trim() 
            $MyIPAddress | Out-File -FilePath ./agent.ip
            $PostGres = Get-AzPostgreSqlServer -ResourceGroupName 's118d01-app'
            If ($null -eq $PostGres) {
                Write-Output "##vso[task.logissue type=warning;]There is no PostGres Server in RG s118d01-app"
                Exit 0
              }
            Write-Output 'Updating PostGres Firewall rules...'
            $PostGresFWRule = New-AzPostgreSqlFirewallRule -Name deployment_rule -ResourceGroupName 's118d01-app' -ServerName $PostGres.Name -EndIPAddress $MyIPAddress -StartIPAddress $MyIPAddress
            $LoopCount = 0
            Write-Output "Waiting for Access..." 
            # This will check every 5 seconds, up to a maximum of 30 seconds
            Do {
                $AccessAllowed = $PostGresFWRule | Get-AzPostgreSqlFirewallRule -ErrorAction SilentlyContinue
                $LoopCount++
                Start-Sleep -Seconds 5
            }
            While ($null -eq $AccessAllowed -and $LoopCount -lt 6)
          azurePowerShellVersion: 'LatestVersion'
          pwsh: true
      # - task: AzurePowerShell@5
      #   inputs:
      #     azureSubscription: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'
      #     ScriptType: 'InlineScript'
      #     Inline: |
      #       $SQLServer = "s118d01-app-db.postgres.database.azure.com"
      #       $db3 = "dqt_poc"
      #       $filename = "${{ variables.datalayer_project_directory }}/migration.sql"
      #       Invoke-Sqlcmd -ServerInstance $SQLServer -Database $db3 -InputFile $filename -Username "tps_development" -Password "Xt7nGrvn.DiCUyJ" -Verbose
      #     FailOnStandardError: true
      #     azurePowerShellVersion: 'LatestVersion'
      #     pwsh: true
      - task: SqlAzureDacpacDeployment@1
        displayName: Publish the database changes
        inputs:
          azureSubscription: "${{ variables.service_connection_name }}"
          AuthenticationType: "server"
          ServerName: "s118d01-app-db.postgres.database.azure.com"
          DatabaseName: "dqt_poc"
          SqlUsername: "tps_development"
          SqlPassword: "Xt7nGrvn.DiCUyJ"
          deployType: "SqlTask"
          SqlFile: "${{ variables.datalayer_project_directory }}/migration.sql"
          IpDetectionMethod: "AutoDetect"

      - task: AzurePowerShell@5
        displayName: "Close PostgreSQL Firewall"
        inputs:
          azureSubscription: "azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef"
          ScriptType: "InlineScript"
          Inline: |
            # Setting Variables
            $PostGres = Get-AzPostgreSqlServer -ResourceGroupName 's118d01-app'
            If ($null -eq $PostGres) {
                Write-Output "##vso[task.logissue type=warning;]There is no PostGres Server in RG s118d01-app"
                Exit 0
                }
            Write-Output 'Removing Deployment PostGres Deployment Firewall rule...'
            Remove-AzPostgreSqlFirewallRule -Name deployment_rule -ResourceGroupName 's118d01-app' -ServerName $PostGres.Name
          azurePowerShellVersion: "LatestVersion"


 