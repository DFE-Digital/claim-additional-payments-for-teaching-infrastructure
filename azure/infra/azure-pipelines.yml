
trigger:
  branches:
    include:
    - main

stages:
- stage: plan
  displayName: Plan

  jobs:
  - job: plan 
    displayName: Plan

    pool:
      # vmImage: ubuntu-default
      vmImage: "ubuntu-latest"

    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.14.6'
    - task: TerraformTaskV1@0
      name: TFInit
      displayName: "TF init example"
      inputs:
        provider: "azurerm"
        command: "init"
        workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
        backendServiceArm: "azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef"
        backendAzureRmResourceGroupName: "s118d01-tfbackend"
        backendAzureRmStorageAccountName: "s118d01tfbackendsa"
        backendAzureRmContainerName: "s118d01tfstate"
        backendAzureRmKey: "terraform.tfstate"

    - task: TerraformTaskV1@0
      displayName: "TF plan infradev"
      name: TFPlan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: '-var="input_region=$(REGION)" -var="input_environment=$(environment)"'
        environmentServiceNameAzureRM: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'

    - task: CopyFiles@2
      displayName: 'Stage Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          code/terraform/**
          .artifactignore
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: false

    # Publish artifact to pipeline
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'dev_plan'
        publishLocation: 'pipeline'

- stage: apply
  displayName: Apply
  dependsOn: plan
  
#  jobs:
#
#  - deployment: apply
#    displayName: Apply
#    environment: 'infra dev'

  jobs:
  - job: apply
    displayName: Apply

    pool:
      vmImage: 'ubuntu-latest'

#  strategy:
#    runOnce:
#      deploy:
    steps:
      - download: current
        artifact: 'dev_plan'

      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '0.14.6'

      - task: TerraformTaskV1@0
        name: TFInit
        displayName: "TF init example"
        inputs:
          provider: "azurerm"
          command: "init"
          workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
          backendServiceArm: "azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef"
          backendAzureRmResourceGroupName: "s118d01-tfbackend"
          backendAzureRmStorageAccountName: "s118d01tfbackendsa"
          backendAzureRmContainerName: "s118d01tfstate"
          backendAzureRmKey: "terraform.tfstate"        

      - task: TerraformTaskV1@0
        displayName: "TF apply infradev"
        name: TFApply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          commandOptions: '-var="input_region=$(REGION)" -var="input_environment=$(environment)"'
          environmentServiceNameAzureRM: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'

  # - task: TerraformTaskV1@0
  #   displayName: 'TF destroy example'
  #   name: TFDestroy
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'destroy'
  #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  #.    commandOptions: '-var="input_region=$(REGION)" -var="input_rg_prefix=$(rg_prefix)"'
  #     environmentServiceNameAzureRM: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'

