trigger: none
  # branches:
  #   include:
  #   - main

parameters:
  - name: RunDeploy
    displayName: "run deployment step"
    type: boolean
    default: true

stages:
- stage: plan
  displayName: Plan

  jobs:
  - job: plan 
    displayName: Plan

    pool:
      vmImage: "ubuntu-latest"

    steps:
    - task: AzurePowerShell@5
      displayName: 'Check MPN ID'
      timeoutInMinutes: 3
      inputs:
        azureSubscription: 'azdo.pipelines.cip.S118P.armf895c908-777c-49ec-b814-3c50d459c6ab'
        ScriptType: 'InlineScript'
        Inline: |
          # Set variable
          $PartnerId = "5168752"
          # Install management partner module
          Install-Module -Name Az.ManagementPartner -RequiredVersion 0.7.1 -Force -Scope CurrentUser -AllowClobber  
          # Get the current partner info, don't throw an error if not set
          $PartnerInfo = Get-AzManagementPartner -ErrorAction SilentlyContinue
          if ($null -eq $PartnerInfo) {
              # Is null, so set partner id
              New-AzManagementPartner -PartnerId $PartnerId
          } else {
            if ($PartnerId -eq $PartnerInfo.PartnerId) {
              # Is already set to the desired Id, output to console
              Write-Output $PartnerInfo
            } else {
              # Is set but not to desired Id
              Update-AzManagementPartner -PartnerId $PartnerId
            }
          }
        errorActionPreference: 'silentlyContinue'
        azurePowerShellVersion: 'LatestVersion'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Installing Terraform $(Terraform.Version) for plan'
      inputs:
        terraformVersion: '0.14.6'

    - task: TerraformTaskV1@0
      name: TFInit
      displayName: "TerraForm init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/azure/infra/terraform'
        commandOptions: '-backend-config="storage_account_name=s118p01tfbackendsa" -backend-config="container_name=s118p01westprodtfstate"'
        backendServiceArm: 'azdo.pipelines.cip.S118P.armf895c908-777c-49ec-b814-3c50d459c6ab'
        backendAzureRmResourceGroupName: 's118p01-tfbackend'
        backendAzureRmStorageAccountName: 's118p01tfbackendsa'
        backendAzureRmContainerName: 's118p01westprodtfstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: AzurePowerShell@5
      displayName: 'Open KeyVault Firewall'
      inputs:
        azureSubscription: 'azdo.pipelines.cip.S118P.armf895c908-777c-49ec-b814-3c50d459c6ab'
        ScriptType: 'InlineScript'
        Inline: |
          # Setting Variables
          $KeyVaultId = '/subscriptions/88bd392f-df19-458b-a100-22b4429060ed/resourceGroups/s118p01-secrets/providers/Microsoft.KeyVault/vaults/s118p01-secrets-kv'
          $KeyVault = Get-AzResource -ResourceId $KeyVaultId -ErrorAction SilentlyContinue
          If ($null -eq $KeyVault) {
            Write-Output "##vso[task.logissue type=warning;]The Key Vault with Id $KeyVaultId does not exist"
            Exit 0
          }
          $KeyVault = Get-AzKeyVault -ResourceGroupName $KeyVault.ResourceGroupName -VaultName $KeyVault.Name
          Write-Output 'Updating Key Vault rules...'
          $KeyVault | Update-AzKeyVaultNetworkRuleSet -DefaultAction Allow 
          $LoopCount = 0
          Write-Output "Waiting for Access..." 
          # This will check every 5 seconds, up to a maximum of 30 seconds
          Do {
              $AccessAllowed = $KeyVault | Get-AzKeyVaultSecret -ErrorAction SilentlyContinue
              $LoopCount++
              Start-Sleep -Seconds 5
          }
          While ($null -eq $AccessAllowed -and $LoopCount -lt 6)
        azurePowerShellVersion: 'LatestVersion'

    - task: TerraformTaskV1@0
      displayName: "TerraForm plan"
      name: TFPlan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/azure/infra/terraform'
        commandOptions: '-var="input_region=$(REGION)" -var="input_environment=$(environment)"'
        environmentServiceNameAzureRM: 'azdo.pipelines.cip.S118P.armf895c908-777c-49ec-b814-3c50d459c6ab'

    - task: AzurePowerShell@5
      displayName: 'Close KeyVault Firewall'
      condition: always()
      inputs:
        azureSubscription: 'azdo.pipelines.cip.S118P.armf895c908-777c-49ec-b814-3c50d459c6ab'
        ScriptType: 'InlineScript'
        Inline: |
          # Setting Variables
          $KeyVaultId = '/subscriptions/88bd392f-df19-458b-a100-22b4429060ed/resourceGroups/s118p01-secrets/providers/Microsoft.KeyVault/vaults/s118p01-secrets-kv'
          $KeyVault = Get-AzResource -ResourceId $KeyVaultId -ErrorAction SilentlyContinue
          $KeyVault = Get-AzKeyVault -ResourceGroupName $KeyVault.ResourceGroupName -VaultName $KeyVault.Name
          Write-Output 'Updating Key Vault rules...'
          $KeyVault | Update-AzKeyVaultNetworkRuleSet -DefaultAction Deny
        azurePowerShellVersion: 'LatestVersion'

    - task: CopyFiles@2
      displayName: 'Stage Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          terraform/**
          .artifactignore
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: false

    # Publish artifact to pipeline
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'dev_plan'
        publishLocation: 'pipeline'

- stage: apply
  displayName: Apply
  dependsOn: plan
  condition: ${{ parameters.RunDeploy }}

  jobs:
  - job: apply
    displayName: Apply

    pool:
      vmImage: 'ubuntu-latest'

#  strategy:
#    runOnce:
#      deploy:
    steps:
      - download: current
        artifact: 'dev_plan'

      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: 'Installing Terraform $(Terraform.Version) for apply'
        inputs:
          terraformVersion: '0.14.6'

      - task: TerraformTaskV1@0
        name: TFInit
        displayName: "TerraForm init"
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/azure/infra/terraform'
          commandOptions: '-backend-config="storage_account_name=s118p01tfbackendsa" -backend-config="container_name=s118p01westprodtfstate"'
          backendServiceArm: 'azdo.pipelines.cip.S118P.armf895c908-777c-49ec-b814-3c50d459c6ab'
          backendAzureRmResourceGroupName: 's118p01-tfbackend'
          backendAzureRmStorageAccountName: 's118p01tfbackendsa'
          backendAzureRmContainerName: 's118p01testtfstate'
          backendAzureRmKey: 'terraform.tfstate'

      - task: AzurePowerShell@5
        displayName: 'Open KeyVault Firewall'
        inputs:
          azureSubscription: 'azdo.pipelines.cip.S118P.armf895c908-777c-49ec-b814-3c50d459c6ab'
          ScriptType: 'InlineScript'
          Inline: |
            # Setting Variables
            $KeyVaultId = '/subscriptions/88bd392f-df19-458b-a100-22b4429060ed/resourceGroups/s118p01-secrets/providers/Microsoft.KeyVault/vaults/s118p01-secrets-kv'
            $KeyVault = Get-AzResource -ResourceId $KeyVaultId -ErrorAction SilentlyContinue
            If ($null -eq $KeyVault) {
              Write-Output "##vso[task.logissue type=warning;]The Key Vault with Id $KeyVaultId does not exist"
              Exit 0
            }
            $KeyVault = Get-AzKeyVault -ResourceGroupName $KeyVault.ResourceGroupName -VaultName $KeyVault.Name
            Write-Output 'Updating Key Vault rules...'
            $KeyVault | Update-AzKeyVaultNetworkRuleSet -DefaultAction Allow 
            $LoopCount = 0
            Write-Output "Waiting for Access..." 
            # This will check every 5 seconds, up to a maximum of 30 seconds
            Do {
                $AccessAllowed = $KeyVault | Get-AzKeyVaultSecret -ErrorAction SilentlyContinue
                $LoopCount++
                Start-Sleep -Seconds 5
            }
            While ($null -eq $AccessAllowed -and $LoopCount -lt 6)
          azurePowerShellVersion: 'LatestVersion'

      - task: TerraformCLI@0
        displayName: "TerraForm apply"
        name: TFApply
        inputs:
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/azure/infra/terraform'
          environmentServiceName: 'azdo.pipelines.cip.S118P.armf895c908-777c-49ec-b814-3c50d459c6ab'
          runAzLogin: true
          commandOptions: '-var="input_region=$(REGION)" -var="input_environment=$(environment)"'
          allowTelemetryCollection: true

  # - task: TerraformTaskV1@0
  #   displayName: 'TF destroy example'
  #   name: TFDestroy
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'destroy'
  #     workingDirectory: '$(System.DefaultWorkingDirectory)/azure/infra/terraform'
  #.    commandOptions: '-var="input_region=$(REGION)" -var="input_rg_prefix=$(rg_prefix)"'
  #     environmentServiceNameAzureRM: 'azdo.pipelines.cip.S118D.armfe1ef140-8bef-4043-b5ee-c449e6f951ef'

      - task: AzurePowerShell@5
        displayName: 'Close KeyVault Firewall'
        condition: always()
        inputs:
          azureSubscription: 'azdo.pipelines.cip.S118P.armf895c908-777c-49ec-b814-3c50d459c6ab'
          ScriptType: 'InlineScript'
          Inline: |
            # Setting Variables
            $KeyVaultId = '/subscriptions/88bd392f-df19-458b-a100-22b4429060ed/resourceGroups/s118p01-secrets/providers/Microsoft.KeyVault/vaults/s118p01-secrets-kv'
            $KeyVault = Get-AzResource -ResourceId $KeyVaultId -ErrorAction SilentlyContinue
            $KeyVault = Get-AzKeyVault -ResourceGroupName $KeyVault.ResourceGroupName -VaultName $KeyVault.Name
            Write-Output 'Updating Key Vault rules...'
            $KeyVault | Update-AzKeyVaultNetworkRuleSet -DefaultAction Deny
          azurePowerShellVersion: 'LatestVersion'